/* SWI-Prolog query log.  This file contains all syntactically
   correct queries issued in this directory.  It is used by the
   test wizard to generate unit tests.
*/

list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:org/0) ->\n            Pred = plunit_utilities:org\n          ; DcgArity is 2,\n            functor(Term, org, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:org/0) ->\n            Pred = plunit_utilities:org\n          ; DcgArity is 2,\n            functor(Term, org, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
spy(test_lexical).
run_tests.
set_prolog_flag(answer_write_options,[max_depth(0)]).
run_tests.
run_tests.
nospyall.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/lexical.pl'].
run_tests.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
start_servers.
run_tests.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(phrase(restServer:rest_path/3) ->\n            Pred = phrase(restServer:rest_path(Action,Options,Object)\n          ; DcgArity is 5,\n            functor(Term, rest_path, DcgArity),\n            Pred = phrase(restServer:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/tests.pl'].
run_tests(rest).
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
start.
true.
halt.
true.
halt.
pwd.
true.
halt.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:test_translations/0) ->\n            Pred = plunit_utilities:test_translations\n          ; DcgArity is 2,\n            functor(Term, test_translations, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:gacto2/0) ->\n            Pred = plunit_utilities:gacto2\n          ; DcgArity is 2,\n            functor(Term, gacto2, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
list_undefined.
list_undefined.
list_undefined.
spy(start).
start.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/tests.pl'].
start.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/restServer.pl'].
true.
halt.
true.
halt.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:process_rest/1) ->\n            Pred = plunit_utilities:process_rest(Request)\n          ; DcgArity is 3,\n            functor(Term, process_rest, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/restServer.pl'].
start.
list_undefined.
list_undefined.
list_undefined.
start.
start.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
list_undefined.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:rest/0) ->\n            Pred = plunit_utilities:rest\n          ; DcgArity is 2,\n            functor(Term, rest, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
list_undefined.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(restServer:process_rest/1) ->\n            Pred = restServer:process_rest(Request)\n          ; DcgArity is 3,\n            functor(Term, process_rest, DcgArity),\n            Pred = restServer:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
list_undefined.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
','(open_string("\n        source_location:-\n          (current_predicate(restServer:process_rest/1) ->\n            Pred = restServer:process_rest(Request)\n          ; DcgArity is 3,\n            functor(Term, process_rest, DcgArity),\n            Pred = restServer:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
list_undefined.
list_undefined.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(restServer:process_rest/1) ->\n            Pred = restServer:process_rest(Request)\n          ; DcgArity is 3,\n            functor(Term, process_rest, DcgArity),\n            Pred = restServer:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:cli/0) ->\n            Pred = plunit_utilities:cli\n          ; DcgArity is 2,\n            functor(Term, cli, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
list_undefined.
true.
halt.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:documents/0) ->\n            Pred = plunit_utilities:documents\n          ; DcgArity is 2,\n            functor(Term, documents, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
list_undefined.
true.
halt.
true.
halt.
true.
halt.
list_undefined.
','(open_string("\n        source_location:-\n          (current_predicate(plunit_utilities:tests/0) ->\n            Pred = plunit_utilities:tests\n          ; DcgArity is 2,\n            functor(Term, tests, DcgArity),\n            Pred = plunit_utilities:Term\n          ),\n          predicate_property(Pred, file(File)),\n          predicate_property(Pred, line_count(Line)),\n          format(\"File:~s;Line:~d~n\", [File, Line]).\n          ",Stream),load_files(runprolog,[stream(Stream)])).
source_location.
halt.
true.
halt.
list_undefined.
true.
halt.
list_undefined.
list_undefined.
list_undefined.
true.
halt.
list_undefined.
true.
halt.
list_undefined.
list_undefined.
list_undefined.
true.
halt.
true.
halt.
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/tests.pl'].
test_teste.
true.
halt.
true.
halt.
start.
list_undefined.
list_undefined.
list_undefined.
start.
true.
halt.
spy(start).
true.
halt.
true.
halt.
true.
halt.
spy(process_rest).
list_undefined.
true.
halt.
run_tests(lexical).
['/Users/joaquimcarvalho/develop/mhk-git/clio/src/serverStart.pl'].
run_debug_server.
list_undefined.
list_undefined.
true.
halt.
